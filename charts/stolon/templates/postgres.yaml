apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-keeper
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Release.Name }}-keeper
  replicas: {{ .Values.postgres_replicas }}
  selector:
    matchLabels:
      component: stolon-keeper
      stolon-cluster: {{ include "stolon.cluster" . }}
  template:
    metadata:
      labels:
        component: stolon-keeper
        stolon-cluster: {{ include "stolon.cluster" . }}
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: {{ include "stolon.serviceAccount" . }}
      {{ include "stolon.pullsecrets" . | indent 6 }}
      initContainers:
        - name: check-sentinel
          imagePullPolicy: IfNotPresent
          image: {{ include "sidecar.image" . }}
          command:
            - sh
            - '-c'
            - |
              echo trying to contact {{ .Release.Name }}-sentinel-monitoring 8080
              until nc -vzw 1 {{ .Release.Name }}-sentinel-monitoring 8080; do
                echo "waiting for stolon sentinel..."
                sleep 2
              done

        - name: check-proxy
          imagePullPolicy: IfNotPresent
          image: {{ include "sidecar.image" . }}
          command:
            - sh
            - '-c'
            - |
              echo trying to contact {{ .Release.Name }}-proxy-service 5432
              until nc -vzw 1 {{ .Release.Name }}-proxy-service 5432; do
                echo "waiting for stolon TCP proxy..."
                sleep 2
              done

        - name: init-cluster
          imagePullPolicy: IfNotPresent
          image: {{ include "stolon.image" . }}
          command:
            - '/bin/bash'
            - '-ec'
            - |
              if [ -d ${STKEEPER_DATA_DIR}/postgres ]
                then
                  echo FIX DATABASE DIR ${STKEEPER_DATA_DIR} PERMISSIONS
                  chmod 750 ${STKEEPER_DATA_DIR}/postgres
                  chmod -s ${STKEEPER_DATA_DIR}/postgres
                else
                  echo DATABASE IN ${STKEEPER_DATA_DIR} WILL BE INITIALIZED
                  {{ if not .Values.openshift.enabled }}chown stolon:stolon ${STKEEPER_DATA_DIR}{{ end }}
              fi
              if [ -f ${STKEEPER_DATA_DIR}/password ]
                then
                  echo ROOT PASSWORD FILE ${STKEEPER_DATA_DIR}/password EXISTS
                else
                  echo ROOT PASSWORD FILE ${STKEEPER_DATA_DIR}/password NOT EXISTS
                  cp /etc/secrets/stolon/password ${STKEEPER_DATA_DIR}/password
                  chmod 600 ${STKEEPER_DATA_DIR}/password
              fi

              if [ -d ${STKEEPER_DATA_DIR}/cluster_backup ]
                then
                  echo CLUSTER STATE BACKUP DIRECTORY ALREADY EXISTS
                else
                  mkdir ${STKEEPER_DATA_DIR}/cluster_backup
                  {{ if not .Values.openshift.enabled }}chown stolon:stolon ${STKEEPER_DATA_DIR}/cluster_backup{{ end }}
                  echo CLUSTER BACKUP DIRECTORY CREATED
              fi

              # if cluster state file exists
              if [ -f ${STKEEPER_DATA_DIR}/dbstate ]
                then
                  cp ${STKEEPER_DATA_DIR}/dbstate ${STKEEPER_DATA_DIR}/cluster_backup/dbstate-$(date +%F-%H-%M-%S)
                  echo CLUSTER DATA BACKUP FINISHED
                  echo TRY START STOLON
                else
                  echo CLUSTER DATA DOES NOT EXISTS
                  # check database data existence
                  if [ -d ${STKEEPER_DATA_DIR}/postgres/base ]
                    then
                      echo CLUSTER DATA DOES NOT EXISTS BUT POSTGRES DATA EXISTS, CLUSTER NEEDS REPAIR
                      sleep 30
                      exit 1
                    else
                      if [[ $(ls ${STKEEPER_DATA_DIR}/cluster_backup | wc -l ) > 0 ]]
                        then
                          echo CLUSTER DATA BACKUP EXISTS BUT POSTGRES DATA DOESNT EXIST, CLUSTER NEEDS REPAIR
                          sleep 30
                          exit 1
                        else
                          echo CLUSTER DATA DOESNT EXISTS, CLUSTER BACKUP DATA DOESNT EXIST AND POSTGRES DATA DOESNT EXIST
                          if [[ ${POD_NAME} == {{ .Release.Name }}-keeper-0 ]]
                            then
                              echo CLUSTER WILL BE INITIALIZED
                              stolonctl init --log-level=debug -y
                              echo CLUSTER IS INITIALIZED, TRY START STOLON
                            else
                              echo THIS IS NOT THE FIRST CLUSTER NODE
                              echo STOLON CANNOT BE INIT ON THIS NODE
                              echo TRY START STOLON
                          fi
                      fi
                  fi
              fi

          env:
            - name: STKEEPER_DATA_DIR
              value: "/stolon-data"
            - name: STOLONCTL_CLUSTER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['stolon-cluster']
            - name: STOLONCTL_STORE_BACKEND
              value: "kubernetes"
            - name: STOLONCTL_KUBE_RESOURCE_KIND
              value: "configmap"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

          volumeMounts:
            - mountPath: /stolon-data
              name: {{ .Release.Name }}-data
            {{- include "stolon.passwordMount" . | indent 12 }}

      containers:
        - name: keeper
          image: {{ include "stolon.image" . }}
          command:
            - "/bin/bash"
            - "-ec"
            - "{{ if not .Values.openshift.enabled }}exec gosu stolon {{ end }}stolon-keeper --uid ${POD_NAME##*keeper-}"

          env:
            - name: STKEEPER_DATA_DIR
              value: "/stolon-data"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: STKEEPER_PG_LISTEN_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: STKEEPER_CLUSTER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['stolon-cluster']
            - name: STKEEPER_STORE_BACKEND
              value: "kubernetes"
            - name: STKEEPER_KUBE_RESOURCE_KIND
              value: "configmap"
            - name: STKEEPER_PG_REPL_USERNAME
              value: "repluser"
            - name: STKEEPER_PG_REPL_PASSWORDFILE
              value: "/etc/secrets/stolon/replpassword"
            - name: STKEEPER_PG_SU_USERNAME
              value: "stolon"
            - name: STKEEPER_PG_SU_PASSWORDFILE
              value: "/stolon-data/password"
            - name: STKEEPER_METRICS_LISTEN_ADDRESS
              value: "0.0.0.0:8080"

            - name: STOLONCTL_CLUSTER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['stolon-cluster']
            - name: STOLONCTL_STORE_BACKEND
              value: "kubernetes"
            - name: STOLONCTL_KUBE_RESOURCE_KIND
              value: "configmap"

          ports:
            - containerPort: 5432
            - containerPort: 8080
          volumeMounts:
            - mountPath: /stolon-data
              name: {{ .Release.Name }}-data
            {{- include "stolon.passwordMount" . | indent 12 }}
          startupProbe:
            exec:
              command:
                - bash
                - '-c'
                - |
                  export ROOT_PASSWORD=$(cat /etc/secrets/stolon/password) \
                  && export CURRENT_ROOT_PASSWORD=$(cat ${STKEEPER_DATA_DIR}/password) \
                  && if [ ${ROOT_PASSWORD} == ${CURRENT_ROOT_PASSWORD} ]
                    then
                      export REPLICATION_PASSWORD=$(cat ${STKEEPER_PG_REPL_PASSWORDFILE}) \
                      && psql postgresql://stolon:${ROOT_PASSWORD}@{{ .Release.Name }}-proxy-service:5432/postgres -c "ALTER USER repluser WITH PASSWORD '${REPLICATION_PASSWORD}'" \
                      && psql postgresql://stolon:${ROOT_PASSWORD}@${POD_IP}:5432/postgres -c 'SELECT datname from pg_database'
                    else
                      psql postgresql://stolon:${CURRENT_ROOT_PASSWORD}@{{ .Release.Name }}-proxy-service:5432/postgres -c "ALTER USER stolon WITH PASSWORD '${ROOT_PASSWORD}'" \
                      || psql postgresql://stolon:${ROOT_PASSWORD}@${POD_IP}:5432/postgres -c 'SELECT datname from pg_database' \
                      && cp -f /etc/secrets/stolon/password ${STKEEPER_DATA_DIR}/password 2>&1 \
                      && kill 1
                  fi
            failureThreshold: 60
            periodSeconds: 2
          livenessProbe:
            exec:
              command:
                - "/bin/bash"
                - "-ec"
                - "psql postgresql://stolon:$(cat ${STKEEPER_PG_SU_PASSWORDFILE})@${POD_IP}:5432/postgres -c 'SELECT datname from pg_database'"
            periodSeconds: 10
            failureThreshold: 2
      volumes:
        - name: {{ .Release.Name }}
          secret:
            secretName: {{ .Release.Name }}

  volumeClaimTemplates:
    - metadata:
        labels:
          component: stolon-keeper
          stolon-cluster: {{ include "stolon.cluster" . }}
        name: {{ .Release.Name }}-data
      spec:
        {{ if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{ end }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
