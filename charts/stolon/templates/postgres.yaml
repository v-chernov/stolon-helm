apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: stolon-keeper
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Release.Name }}-keeper
  replicas: {{ .Values.postgres_replicas }}
  selector:
    matchLabels:
      component: {{ .Release.Name }}-keeper
      stolon-cluster: {{ .Release.Name }}-{{ .Release.Namespace }}
  template:
    metadata:
      labels:
        component: {{ .Release.Name }}-keeper
        stolon-cluster: {{ .Release.Name }}-{{ .Release.Namespace }}
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      {{ if .Values.global.serviceAccount.name }}serviceAccountName: {{ .Values.global.serviceAccount.name }}{{ else }}serviceAccountName: default{{ end }}
      {{ if .Values.global.imagePullSecrets }}imagePullSecrets:
        {{ range .Values.global.imagePullSecrets }}
          - {{ . | toYaml}}
        {{ end }}{{ end }}
      initContainers:
        - name: cluster
          imagePullPolicy: IfNotPresent
          image: {{ if .Values.global.image_repo }}{{ .Values.global.image_repo }}/{{ end }}busybox:{{ .Values.global.busybox_tag }}
          command:
            - sh
            - '-c'
            - |
              echo trying to contact {{ .Release.Name }}-sentinel-monitoring 8080
              until nc -vzw 1 {{ .Release.Name }}-sentinel-monitoring 8080; do
                echo "waiting for stolon cluster..."
                sleep 2
              done

        - name: force-permissions
          imagePullPolicy: IfNotPresent
          image: {{ if .Values.global.image_repo }}{{ .Values.global.image_repo }}/{{ end }}busybox:{{ .Values.global.busybox_tag }}
          command:
            - sh
            - '-c'
            - |
              if [ -d ${STKEEPER_DATA_DIR}/postgres ]
                then
                  echo FIX DATABASE DIR ${STKEEPER_DATA_DIR} PERMISSIONS
                  chmod 750 ${STKEEPER_DATA_DIR}/postgres
                  chmod -s ${STKEEPER_DATA_DIR}/postgres
                else
                  echo DATABASE IN ${STKEEPER_DATA_DIR} WILL BE INITIALIZED
                  {{ if not .Values.openshift.enabled }}chown stolon:stolon ${STKEEPER_DATA_DIR}{{ end }}
              fi
              if [ -f ${STKEEPER_DATA_DIR}/password ]
                then
                  echo ROOT PASSWORD FILE ${STKEEPER_DATA_DIR}/password EXISTS
                else
                  echo ROOT PASSWORD FILE ${STKEEPER_DATA_DIR}/password NOT EXISTS
                  cp /etc/secrets/stolon/password ${STKEEPER_DATA_DIR}/password
                  chmod 600 ${STKEEPER_DATA_DIR}/password
              fi
          env:
            - name: STKEEPER_DATA_DIR
              value: "/stolon-data"
          volumeMounts:
            - mountPath: /stolon-data
              name: {{ .Release.Name }}-data
            - mountPath: /etc/secrets/stolon
              name: {{ .Release.Name }}

      containers:
        - name: {{ .Release.Name }}-keeper
          image: {{ if .Values.global.image_repo }}{{ .Values.global.image_repo }}/{{ end }}sorintlab/stolon:master-pg{{ .Values.global.postgres_version }}
          command:
            - "/bin/bash"
            - "-ec"
            - "{{ if not .Values.openshift.enabled }}exec gosu stolon {{ end }}stolon-keeper --uid ${POD_NAME##*keeper-}"
          env:
            - name: STKEEPER_DATA_DIR
              value: "/stolon-data"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: STKEEPER_PG_LISTEN_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: STKEEPER_CLUSTER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['stolon-cluster']
            - name: STKEEPER_STORE_BACKEND
              value: "kubernetes"
            - name: STKEEPER_KUBE_RESOURCE_KIND
              value: "configmap"
            - name: STKEEPER_PG_REPL_USERNAME
              value: "repluser"
            - name: STKEEPER_PG_REPL_PASSWORDFILE
              value: "/etc/secrets/stolon/replpassword"
            - name: STKEEPER_PG_SU_USERNAME
              value: "stolon"
            - name: STKEEPER_PG_SU_PASSWORDFILE
              value: "/stolon-data/password"
            - name: STKEEPER_METRICS_LISTEN_ADDRESS
              value: "0.0.0.0:8080"
          ports:
            - containerPort: 5432
            - containerPort: 8080
          volumeMounts:
            - mountPath: /stolon-data
              name: {{ .Release.Name }}-data
            - mountPath: /etc/secrets/stolon
              name: {{ .Release.Name }}
          startupProbe:
            exec:
              command:
                - bash
                - '-c'
                - |
                  export ROOT_PASSWORD=$(cat /etc/secrets/stolon/password) \
                  && export CURRENT_ROOT_PASSWORD=$(cat ${STKEEPER_DATA_DIR}/password) \
                  && if [ ${ROOT_PASSWORD} == ${CURRENT_ROOT_PASSWORD} ]
                    then
                      export REPLICATION_PASSWORD=$(cat ${STKEEPER_PG_REPL_PASSWORDFILE}) \
                      && psql postgresql://stolon:${ROOT_PASSWORD}@{{ .Release.Name }}-proxy-service:5432/postgres -c "ALTER USER repluser WITH PASSWORD '${REPLICATION_PASSWORD}'" \
                      && psql postgresql://stolon:${ROOT_PASSWORD}@${POD_IP}:5432/postgres -c 'SELECT datname from pg_database'
                    else
                      psql postgresql://stolon:${CURRENT_ROOT_PASSWORD}@{{ .Release.Name }}-proxy-service:5432/postgres -c "ALTER USER stolon WITH PASSWORD '${ROOT_PASSWORD}'" \
                      || psql postgresql://stolon:${ROOT_PASSWORD}@${POD_IP}:5432/postgres -c 'SELECT datname from pg_database' \
                      && cp -f /etc/secrets/stolon/password ${STKEEPER_DATA_DIR}/password \
                      && kill 1
                  fi
            failureThreshold: 60
            periodSeconds: 2
          livenessProbe:
            exec:
              command:
                - "/bin/bash"
                - "-ec"
                - "psql postgresql://stolon:$(cat ${STKEEPER_PG_SU_PASSWORDFILE})@${POD_IP}:5432/postgres -c 'SELECT datname from pg_database'"
            periodSeconds: 10
            failureThreshold: 2
      volumes:
        - name: {{ .Release.Name }}
          secret:
            secretName: {{ .Release.Name }}

  volumeClaimTemplates:
    - metadata:
        labels:
          component: {{ .Release.Name }}-keeper
          stolon-cluster: {{ .Release.Name }}-{{ .Release.Namespace }}
        name: {{ .Release.Name }}-data
      spec:
        {{ if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{ end }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
