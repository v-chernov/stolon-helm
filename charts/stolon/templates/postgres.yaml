apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-keeper
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Release.Name }}-keeper
  replicas: {{ .Values.postgres_replicas }}
  selector:
    matchLabels:
      component: stolon-keeper
      stolon-cluster: {{ include "stolon.cluster" . }}
  template:
    metadata:
      labels:
        component: stolon-keeper
        stolon-cluster: {{ include "stolon.cluster" . }}
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: {{ include "stolon.serviceAccount" . }}
      {{ include "stolon.pullsecrets" . | indent 6 }}
      initContainers:
        - name: check-sentinel
          imagePullPolicy: IfNotPresent
          image: {{ include "sidecar.image" . }}
          command:
            - sh
            - '-c'
            - |
              echo trying to contact {{ .Release.Name }}-sentinel-monitoring 8080
              until nc -vzw 1 {{ .Release.Name }}-sentinel-monitoring 8080; do
                echo "waiting for stolon sentinel..."
                sleep 2
              done
          {{- if .Values.initResources }}
          resources:
            {{- toYaml .Values.initResources | nindent 12 }}
          {{- end }}

        - name: check-proxy
          imagePullPolicy: IfNotPresent
          image: {{ include "sidecar.image" . }}
          command:
            - sh
            - '-c'
            - |
              echo trying to contact ${PGHOST} 5432
              until nc -vzw 1 ${PGHOST} 5432; do
                echo "waiting for stolon TCP proxy..."
                sleep 2
              done
          env:
            {{- include "psql.ctl" . | indent 12 }}
          {{- if .Values.initResources }}
          resources:
            {{- toYaml .Values.initResources | nindent 12 }}
          {{- end }}

        - name: init-cluster
          imagePullPolicy: IfNotPresent
          image: {{ include "stolon.image" . }}
          command:
            - '/bin/bash'
            - '-ec'
            - |
              if [ -d ${STKEEPER_DATA_DIR}/postgres ]
                then
                  {{ include "data" . }} FIX DATABASE DIR ${STKEEPER_DATA_DIR} PERMISSIONS {{ include "logs" . }}
                  chmod 750 ${STKEEPER_DATA_DIR}/postgres
                  chmod -s ${STKEEPER_DATA_DIR}/postgres
                else
                  {{ include "data" . }} DATABASE IN ${STKEEPER_DATA_DIR} WILL BE INITIALIZED {{ include "logs" . }}
                  {{ if not .Values.openshift.enabled }}chown stolon:stolon ${STKEEPER_DATA_DIR}{{ end }}
              fi
              if [ -f ${STKEEPER_PG_SU_PASSWORDFILE} ]
                then
                  {{ include "data" . }} ROOT PASSWORD FILE ${STKEEPER_PG_SU_PASSWORDFILE} EXISTS {{ include "logs" . }}
                else
                  {{ include "data" . }} ROOT PASSWORD FILE ${STKEEPER_PG_SU_PASSWORDFILE} NOT EXISTS {{ include "logs" . }}
                  cp /etc/secrets/stolon/password ${STKEEPER_PG_SU_PASSWORDFILE}
                  chmod 600 ${STKEEPER_PG_SU_PASSWORDFILE}
              fi

              if [ -d ${STKEEPER_DATA_DIR}/cluster_backup ]
                then
                  {{ include "data" . }} CLUSTER STATE BACKUP DIRECTORY ALREADY EXISTS {{ include "logs" . }}
                else
                  mkdir ${STKEEPER_DATA_DIR}/cluster_backup
                  {{- if not .Values.openshift.enabled }}
                  chown stolon:stolon ${STKEEPER_DATA_DIR}/cluster_backup
                  {{- end }}
                  {{ include "data" . }} CLUSTER BACKUP DIRECTORY CREATED {{ include "logs" . }}
              fi

              # if cluster state file exists
              if [ -f ${STKEEPER_DATA_DIR}/dbstate ]
                then
                  cp ${STKEEPER_DATA_DIR}/dbstate ${STKEEPER_DATA_DIR}/cluster_backup/dbstate-$(date +%F-%H-%M-%S)
                  {{ include "data" . }} CLUSTER DATA BACKUP FINISHED {{ include "logs" . }}
                  {{ include "data" . }} APPLY STOLON CONFIG {{ include "logs" . }}
                  stolonctl update -p -f {{ include "stolon.configPath" . }}/config.json
                  {{ include "data" . }} TRY START STOLON {{ include "logs" . }}
                else
                  {{ include "data" . }} CLUSTER DATA DOES NOT EXISTS {{ include "logs" . }}
                  # check database data existence
                  if [ -d ${STKEEPER_DATA_DIR}/postgres/base ]
                    then
                      {{ include "data" . }} CLUSTER DATA DOES NOT EXISTS BUT POSTGRES DATA EXISTS, CLUSTER NEEDS REPAIR {{ include "logs" . }}
                      sleep 30
                      exit 1
                    else
                      if [[ $(ls ${STKEEPER_DATA_DIR}/cluster_backup | wc -l ) > 0 ]]
                        then
                          {{ include "data" . }} CLUSTER DATA BACKUP EXISTS BUT POSTGRES DATA DOESNT EXIST, CLUSTER NEEDS REPAIR {{ include "logs" . }}
                          sleep 30
                          exit 1
                        else
                          {{ include "data" . }} CLUSTER DATA DOESNT EXISTS, CLUSTER BACKUP DATA DOESNT EXIST AND POSTGRES DATA DOESNT EXIST {{ include "logs" . }}
                          if [[ ${POD_NAME} == {{ .Release.Name }}-keeper-0 ]]
                            then
                              {{ include "data" . }} CLUSTER WILL BE INITIALIZED {{ include "logs" . }}
                              stolonctl init --log-level=debug -y
                              {{ include "data" . }} CLUSTER IS INITIALIZED {{ include "logs" . }}
                              {{ include "data" . }} APPLY STOLON CONFIG  {{ include "logs" . }}
                              stolonctl update -p -f {{ include "stolon.configPath" . }}/config.json
                              {{ include "data" . }} TRY START STOLON {{ include "logs" . }}
                            else
                              {{ include "data" . }} THIS IS NOT THE FIRST CLUSTER NODE {{ include "logs" . }}
                              {{ include "data" . }} STOLON CANNOT BE INIT ON THIS NODE {{ include "logs" . }}
                              {{ include "data" . }} TRY START STOLON {{ include "logs" . }}
                          fi
                      fi
                  fi
              fi

          env:
            {{- include "stolon.data" . | indent 12 }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            {{- include "psql.ctl" . | indent 12 }}
            {{- include "stolon.ctl" . | indent 12 }}
          {{- if .Values.initResources }}
          resources:
            {{- toYaml .Values.initResources | nindent 12 }}
          {{- end }}

          volumeMounts:
            - mountPath: /stolon-data
              name: {{ .Release.Name }}-data
            {{- include "stolon.mounts" . | indent 12 }}

      containers:
        - name: keeper
          image: {{ include "stolon.image" . }}
          command:
            - "/bin/bash"
            - "-ec"
            - "{{ if not .Values.openshift.enabled }}exec gosu stolon {{ end }}stolon-keeper --uid ${POD_NAME##*keeper-}"
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: STKEEPER_PG_LISTEN_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: STKEEPER_CLUSTER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['stolon-cluster']
            - name: STKEEPER_STORE_BACKEND
              value: "kubernetes"
            - name: STKEEPER_KUBE_RESOURCE_KIND
              value: "configmap"
            - name: STKEEPER_PG_REPL_USERNAME
              value: "repluser"
            - name: STKEEPER_PG_SU_USERNAME
              value: "stolon"
            - name: STKEEPER_METRICS_LISTEN_ADDRESS
              value: "0.0.0.0:8080"
            {{- include "stolon.ctl" . | indent 12 }}
            {{- include "stolon.data" . | indent 12 }}
            {{- include "psql.ctl" . | indent 12 }}
          ports:
            - containerPort: 5432
            - containerPort: 8080
          volumeMounts:
            - mountPath: /stolon-data
              name: {{ .Release.Name }}-data
            {{- include "stolon.mounts" . | indent 12 }}
          startupProbe:
            exec:
              command:
                - bash
                - '-c'
                - |
                  export CURRENT_ROOT_PASSWORD=$(cat ${STKEEPER_PG_SU_PASSWORDFILE}) \
                  && export ROOT_PASSWORD=$(cat /etc/secrets/stolon/password) \
                  && if [ ${ROOT_PASSWORD} == ${CURRENT_ROOT_PASSWORD} ]
                    then
                      {{ include "data" . }} CURRENT ROOT PASSWORD IS EQUAL TO SECRET ROOT PASSWORD {{ include "logs" . }} \
                      && until {{ include "check.node" . }}; do sleep 0.1; done \
                      && export REPLICATION_PASSWORD=$(cat ${STKEEPER_PG_REPL_PASSWORDFILE}) \
                      && {{ include "data" . }} CONNECTED TO NODE $POD_NAME {{ include "logs" . }} \
                      && {{ include "proxy.connect" . }} -c "ALTER USER repluser WITH PASSWORD '${REPLICATION_PASSWORD}'" \
                      && {{ include "data" . }} REFRESH SYSTEM REPLICATION USER repluser PASSWORD {{ include "logs" . }} \
                      && psql postgresql://repluser:${REPLICATION_PASSWORD}@${PGHOST}:5432/postgres -c 'SELECT datname from pg_database' \
                      && {{ include "data" . }} SYSTEM REPLICATION USER repluser IS READY {{ include "logs" . }}
                    else
                      {{ include "data" . }} CURRENT ROOT PASSWORD IS NOT EQUAL TO SECRET ROOT PASSWORD {{ include "logs" . }} \
                      && while {{ include "proxy.connect" . }}; do {{ include "proxy.connect" . }} -c "ALTER USER stolon WITH PASSWORD '${ROOT_PASSWORD}'" && sleep 1; done \
                      && {{ include "data" . }} FORCE REFRESH OF ROOT PASSWORD EXECUTED {{ include "logs" . }} \
                      && psql postgresql://stolon:${ROOT_PASSWORD}@${PGHOST}:5432/postgres -c 'SELECT datname from pg_database' \
                      && {{ include "data" . }} NEW ROOT PASSWORD IS READY, RENEW SYSTEM PASSWORD FILE {{ include "logs" . }} \
                      && cp -f /etc/secrets/stolon/password ${STKEEPER_DATA_DIR}/password \
                      && pg_ctl -D ${STKEEPER_DATA_DIR}/postgres stop -w
                  fi
            failureThreshold: 10
            periodSeconds: 60
            timeoutSeconds: 60
          livenessProbe:
            exec:
              command:
                - bash
                - '-ec'
                - |
                  {{ include "check.node" . }}
            periodSeconds: 10
            failureThreshold: 2
          readinessProbe:
            exec:
              command:
                - bash
                - '-ec'
                - |
                  {{ include "check.node" . }}
            periodSeconds: 5

          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}

      volumes:
        {{- include "stolon.configVolumes" . | indent 8 }}

  volumeClaimTemplates:
    - metadata:
        labels:
          component: stolon-keeper
          stolon-cluster: {{ include "stolon.cluster" . }}
        name: {{ .Release.Name }}-data
      spec:
        {{ if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{ end }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
