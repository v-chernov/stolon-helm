apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: stolon-keeper
  namespace: {{ .Release.Name }}
spec:
  serviceName: "stolon-keeper"
  replicas: {{ .Values.postgres_replicas }}
  selector:
    matchLabels:
      component: stolon-keeper
      stolon-cluster: {{ .Release.Name }}
  template:
    metadata:
      labels:
        component: stolon-keeper
        stolon-cluster: {{ .Release.Name }}
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: cluster
          imagePullPolicy: IfNotPresent
          image: 'busybox:1.32.0'
          command:
            - sh
            - '-c'
            - |
              echo trying to contact stolon-sentinel-monitoring 8080
              until nc -vzw 1 stolon-sentinel-monitoring 8080; do
                echo "waiting for stolon cluster..."
                sleep 2
              done

      containers:
        - name: stolon-keeper
          image: {{ .Values.global.image_repo }}sorintlab/stolon:master-pg{{ .Values.global.postgres_version }}
          command:
            - "/bin/bash"
            - "-ec"
            - |
              # Generate our keeper uid using the pod index
              IFS='-' read -ra ADDR <<< "$(hostname)"
              export STKEEPER_UID="keeper${ADDR[-1]}"
              export POD_IP=$(hostname -i)
              export STKEEPER_PG_LISTEN_ADDRESS=$POD_IP
              stolon-keeper --data-dir /stolon-data
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: STKEEPER_CLUSTER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['stolon-cluster']
            - name: STKEEPER_STORE_BACKEND
              value: "kubernetes"
            - name: STKEEPER_KUBE_RESOURCE_KIND
              value: "configmap"
            - name: STKEEPER_PG_REPL_USERNAME
              value: "repluser"
            - name: STKEEPER_PG_REPL_PASSWORD
              value: "replpassword"
            - name: STKEEPER_PG_SU_USERNAME
              value: "stolon"
            - name: STKEEPER_PG_SU_PASSWORDFILE
              value: "/etc/secrets/stolon/password"
            - name: STKEEPER_METRICS_LISTEN_ADDRESS
              value: "0.0.0.0:8080"
          ports:
            - containerPort: 5432
            - containerPort: 8080
          volumeMounts:
            - mountPath: /stolon-data
              name: stolon-data
            - mountPath: /etc/secrets/stolon
              name: stolon
      volumes:
        - name: stolon
          secret:
            secretName: stolon

  volumeClaimTemplates:
    - metadata:
        labels:
          component: stolon-keeper
          stolon-cluster: {{ .Release.Name }}
        name: stolon-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.postgres_storage_size }}
