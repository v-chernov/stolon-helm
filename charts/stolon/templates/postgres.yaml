apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: stolon-keeper
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Release.Name }}-keeper
  replicas: {{ .Values.postgres_replicas }}
  selector:
    matchLabels:
      component: {{ .Release.Name }}-keeper
      stolon-cluster: {{ .Release.Name }}-{{ .Release.Namespace }}
  template:
    metadata:
      labels:
        component: {{ .Release.Name }}-keeper
        stolon-cluster: {{ .Release.Name }}-{{ .Release.Namespace }}
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      {{ if .Values.global.serviceAccount.create }}serviceAccountName: {{ .Release.Name }}{{ else }}serviceAccountName: default{{ end }}
      {{ if .Values.global.imagePullSecrets }}imagePullSecrets:
        {{ range .Values.global.imagePullSecrets }}
          - {{ . | toYaml}}
        {{ end }}{{ end }}
      initContainers:
        - name: cluster
          imagePullPolicy: IfNotPresent
          image: {{ if .Values.global.image_repo }}{{ .Values.global.image_repo }}/{{ end }}busybox:{{ .Values.global.busybox_tag }}
          command:
            - sh
            - '-c'
            - |
              echo trying to contact {{ .Release.Name }}-sentinel-monitoring 8080
              until nc -vzw 1 {{ .Release.Name }}-sentinel-monitoring 8080; do
                echo "waiting for stolon cluster..."
                sleep 2
              done
      containers:
        - name: {{ .Release.Name }}-keeper
          image: {{ if .Values.global.image_repo }}{{ .Values.global.image_repo }}/{{ end }}sorintlab/stolon:master-pg{{ .Values.global.postgres_version }}
          command:
            - "/bin/bash"
            - "-ec"
            - |
              # Generate our keeper uid using the pod index
              IFS='-' read -ra ADDR <<< "$(hostname)"
              export STKEEPER_UID="keeper${ADDR[-1]}"
              export POD_IP=$(hostname -i)
              export STKEEPER_PG_LISTEN_ADDRESS=$POD_IP
              {{ if .Values.openshift.enabled }}
              stolon-keeper --data-dir /stolon-data
              {{ else }}
              chown stolon:stolon /stolon-data
              exec gosu stolon stolon-keeper --data-dir /stolon-data
              {{ end }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: STKEEPER_CLUSTER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['stolon-cluster']
            - name: STKEEPER_STORE_BACKEND
              value: "kubernetes"
            - name: STKEEPER_KUBE_RESOURCE_KIND
              value: "configmap"
            - name: STKEEPER_PG_REPL_USERNAME
              value: "repluser"
            - name: STKEEPER_PG_REPL_PASSWORD
              value: "replpassword"
            - name: STKEEPER_PG_SU_USERNAME
              value: "stolon"
            - name: STKEEPER_PG_SU_PASSWORDFILE
              value: "/etc/secrets/stolon/password"
            - name: STKEEPER_METRICS_LISTEN_ADDRESS
              value: "0.0.0.0:8080"
          ports:
            - containerPort: 5432
            - containerPort: 8080
          volumeMounts:
            - mountPath: /stolon-data
              name: {{ .Release.Name }}-data
            - mountPath: /etc/secrets/stolon
              name: {{ .Release.Name }}
      volumes:
        - name: {{ .Release.Name }}
          secret:
            secretName: {{ .Release.Name }}

  volumeClaimTemplates:
    - metadata:
        labels:
          component: {{ .Release.Name }}-keeper
          stolon-cluster: {{ .Release.Name }}-{{ .Release.Namespace }}
        name: {{ .Release.Name }}-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.postgres_storage_size }}
